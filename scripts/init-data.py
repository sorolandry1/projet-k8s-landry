#!/usr/bin/env python3
"""Script pour initialiser la base de donn√©es avec des donn√©es de test"""
import sys
import os

# Ajouter le chemin du backend au PYTHONPATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'backend'))

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from app.models import User, Recipe
from app.core.security import get_password_hash

def init_data():
    DATABASE_URL = os.getenv(
        "DATABASE_URL",
        "postgresql://recette:recette@localhost:5432/recette"
    )
    
    engine = create_engine(DATABASE_URL)
    Session = sessionmaker(bind=engine)
    session = Session()
    
    try:
        # Cr√©er des utilisateurs de test
        users_data = [
            {
                "username": "chef_marie",
                "email": "marie@example.com",
                "password": "Password123!",
                "bio": "Passionn√©e de p√¢tisserie fran√ßaise"
            },
            {
                "username": "cook_jean",
                "email": "jean@example.com",
                "password": "Password123!",
                "bio": "Amateur de cuisine m√©diterran√©enne"
            },
            {
                "username": "baker_sophie",
                "email": "sophie@example.com",
                "password": "Password123!",
                "bio": "Experte en boulangerie artisanale"
            }
        ]
        
        users = []
        print("üìù Cr√©ation des utilisateurs...")
        for user_data in users_data:
            existing = session.query(User).filter(User.email == user_data["email"]).first()
            if not existing:
                user = User(
                    username=user_data["username"],
                    email=user_data["email"],
                    hashed_password=get_password_hash(user_data["password"]),
                    bio=user_data["bio"]
                )
                session.add(user)
                users.append(user)
                print(f"  ‚úì {user_data['username']}")
            else:
                users.append(existing)
                print(f"  ‚ö† {user_data['username']} existe d√©j√†")
        
        session.commit()
        
        # Cr√©er des recettes de test
        recipes_data = [
            {
                "title": "Tarte aux Pommes Classique",
                "description": "Une d√©licieuse tarte aux pommes traditionnelle fran√ßaise avec une p√¢te bris√©e croustillante et des pommes fondantes.",
                "prep_time": 30,
                "cook_time": 45,
                "servings": 8,
                "difficulty": "moyen",
                "category": "dessert",
                "ingredients": [
                    {"name": "P√¢te bris√©e", "quantity": "1", "unit": "pi√®ce"},
                    {"name": "Pommes", "quantity": "6", "unit": "pi√®ces"},
                    {"name": "Sucre", "quantity": "100", "unit": "g"},
                    {"name": "Beurre", "quantity": "50", "unit": "g"},
                    {"name": "Cannelle", "quantity": "1", "unit": "c.√†.c"}
                ],
                "steps": [
                    "Pr√©chauffer le four √† 180¬∞C",
                    "√âplucher et couper les pommes en lamelles",
                    "√âtaler la p√¢te dans un moule",
                    "Disposer les pommes sur la p√¢te",
                    "Saupoudrer de sucre et cannelle",
                    "Ajouter des noisettes de beurre",
                    "Cuire 45 minutes jusqu'√† ce que la tarte soit dor√©e"
                ],
                "tags": ["fran√ßais", "dessert", "automne", "facile"]
            },
            {
                "title": "Salade M√©diterran√©enne",
                "description": "Fra√Æche et color√©e, parfaite pour l'√©t√©. Une explosion de saveurs m√©diterran√©ennes.",
                "prep_time": 15,
                "cook_time": 0,
                "servings": 4,
                "difficulty": "facile",
                "category": "entr√©e",
                "ingredients": [
                    {"name": "Tomates", "quantity": "4", "unit": "pi√®ces"},
                    {"name": "Concombre", "quantity": "1", "unit": "pi√®ce"},
                    {"name": "Feta", "quantity": "200", "unit": "g"},
                    {"name": "Olives noires", "quantity": "100", "unit": "g"},
                    {"name": "Huile d'olive", "quantity": "3", "unit": "c.√†.s"},
                    {"name": "Citron", "quantity": "1", "unit": "pi√®ce"},
                    {"name": "Oignon rouge", "quantity": "1", "unit": "pi√®ce"}
                ],
                "steps": [
                    "Couper les tomates et concombre en d√©s",
                    "√âmincer l'oignon rouge",
                    "√âmietter la feta",
                    "M√©langer tous les ingr√©dients dans un saladier",
                    "Arroser d'huile d'olive et jus de citron",
                    "Assaisonner avec sel et poivre",
                    "Servir frais"
                ],
                "tags": ["√©t√©", "v√©g√©tarien", "rapide", "m√©diterran√©en"]
            },
            {
                "title": "Poulet R√¥ti aux Herbes",
                "description": "Un poulet r√¥ti parfait avec une peau croustillante et une chair juteuse, parfum√© aux herbes de Provence.",
                "prep_time": 20,
                "cook_time": 90,
                "servings": 6,
                "difficulty": "moyen",
                "category": "plat",
                "ingredients": [
                    {"name": "Poulet entier", "quantity": "1.5", "unit": "kg"},
                    {"name": "Beurre", "quantity": "80", "unit": "g"},
                    {"name": "Thym", "quantity": "2", "unit": "branches"},
                    {"name": "Romarin", "quantity": "2", "unit": "branches"},
                    {"name": "Citron", "quantity": "1", "unit": "pi√®ce"},
                    {"name": "Ail", "quantity": "4", "unit": "gousses"}
                ],
                "steps": [
                    "Pr√©chauffer le four √† 200¬∞C",
                    "M√©langer le beurre avec les herbes hach√©es",
                    "Glisser le beurre aux herbes sous la peau du poulet",
                    "Ins√©rer le citron et l'ail dans la cavit√©",
                    "Badigeonner le poulet d'huile d'olive",
                    "R√¥tir 1h30 en arrosant r√©guli√®rement",
                    "Laisser reposer 10 minutes avant de d√©couper"
                ],
                "tags": ["fran√ßais", "plat principal", "festif", "dimanche"]
            },
            {
                "title": "Smoothie Bowl √ânergisant",
                "description": "Un petit-d√©jeuner sain et color√©, plein de vitamines pour bien commencer la journ√©e.",
                "prep_time": 10,
                "cook_time": 0,
                "servings": 2,
                "difficulty": "facile",
                "category": "dessert",
                "ingredients": [
                    {"name": "Bananes congel√©es", "quantity": "2", "unit": "pi√®ces"},
                    {"name": "Myrtilles", "quantity": "150", "unit": "g"},
                    {"name": "Lait d'amande", "quantity": "200", "unit": "ml"},
                    {"name": "Granola", "quantity": "50", "unit": "g"},
                    {"name": "Graines de chia", "quantity": "2", "unit": "c.√†.s"},
                    {"name": "Miel", "quantity": "1", "unit": "c.√†.s"}
                ],
                "steps": [
                    "Mixer les bananes congel√©es avec le lait d'amande",
                    "Ajouter les myrtilles et mixer √† nouveau",
                    "Verser dans des bols",
                    "Garnir de granola et graines de chia",
                    "Arroser de miel",
                    "Servir imm√©diatement"
                ],
                "tags": ["petit-d√©jeuner", "healthy", "v√©g√©tarien", "rapide"]
            }
        ]
        
        print("\nüç≥ Cr√©ation des recettes...")
        for i, recipe_data in enumerate(recipes_data):
            existing = session.query(Recipe).filter(Recipe.title == recipe_data["title"]).first()
            if not existing:
                recipe = Recipe(
                    user_id=users[i % len(users)].id,
                    title=recipe_data["title"],
                    description=recipe_data["description"],
                    prep_time=recipe_data["prep_time"],
                    cook_time=recipe_data["cook_time"],
                    servings=recipe_data["servings"],
                    difficulty=recipe_data["difficulty"],
                    category=recipe_data["category"],
                    ingredients=recipe_data["ingredients"],
                    steps=recipe_data["steps"],
                    tags=recipe_data["tags"]
                )
                session.add(recipe)
                print(f"  ‚úì {recipe_data['title']}")
            else:
                print(f"  ‚ö† {recipe_data['title']} existe d√©j√†")
        
        session.commit()
        
        print("\n‚úÖ Donn√©es de test cr√©√©es avec succ√®s!")
        print(f"  - {len(users)} utilisateurs")
        print(f"  - {len(recipes_data)} recettes")
        print("\nüìù Credentials pour tester:")
        for user_data in users_data:
            print(f"  - Email: {user_data['email']}, Password: {user_data['password']}")
        
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        session.rollback()
        sys.exit(1)
    finally:
        session.close()

if __name__ == "__main__":
    init_data()

